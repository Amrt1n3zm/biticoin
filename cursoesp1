
1 centralizacion Vs descentralizacion
2 consenso distribuido
3 consenso sin identidades , la cadena de bloques block chain
4 incentivos y prueba de trabajo.
5 unir todos estos conceptos.

1 centralizacion Vs descentralizacion.

se comparan los paradigmas de centralizado frente a  descentralizado ,teniendo en cuenta que nada es puramente centralizado 
sino una aproximacion , por ejemplo los servicios de email son un protocolo descentralizado pero se acceden via servicios de
webmail y estos si son centralizados. no es O Todo O nada. 
5 preguntas :

the technical aspects  . los aspectos tecnicos de la descentralizacion de bitcoin 


1 quien mantiene la cadena 

2 quien tiene autoridad para validar las transaciones o movimientos altas en la cadena.

3 quien crea nuevos bitcoins como se generan y que representan ,como funciona su proceso de generacion

4 quien determina como cambian las reglas del suystema , como evolucionan las propuestas  de cambio y que genrean soft y hard forks.

5 como los bitcoins genreados son evaluados como adquieren su valor dentro del mercado de intercambio. 


estos son los COMPONENTES DE LA DESCENTRALIZACION.
empecemos con las tres primeras, para entender lo que queremos definir como descentralizacion


1 quien mantiene la cadena 

2 quien tiene autoridad para validar las transaciones o movimientos altas en la cadena.

3 quien crea nuevos bitcoins como se generan y que representan ,como funciona su proceso de generacion

4 quien determina como cambian las reglas del suystema , como evolucionan las propuestas  de cambio y que genrean soft y hard forks.

5 como los bitcoins genreados son evaluados como adquieren su valor dentro del mercado de intercambio.

este protocolo soporta . 

intercambiadores como servicio ,

software de monederos o carteras ,wallets. 

proveedores de servicios

estos son los COMPONENTES DE LA DESCENTRALIZACION.
empecemos con las tres primeras, para entender lo que queremos definir como descentralizacion


a peer to peer network : abierta a todos y con requerimientos minimos
   miles de nodos sincronizados donde cualquiera con un pc puede participar en los procesos de validacion y verificacion
    de transaciones asi como minar por medio de la participacion en el concurso de prueba de trabajao que variara con el 
    tiempo y que veremos mas adelante.




b minado: abierta a todos pero inevitables concentraciones de poder debido a la relacion directa con los recursos a
consumir alta centralizacion o concentracion de poder en este ecosistema , no deseable .





c actualizaciones del core o nucleo del sistema bitcoincore: los creadores del codigo y la comunidad de desarrolladores 
   concentran un gran poder de decisiones. cambios reglas conceptualamente cualqueira aque rune un nodo no puede cambiar nada, 
 





2 consenso distribuido:

composicion de las 3 primeras.
bitcoin exchanges wallet service y correos servicos de desarrolo hibridos desdecntralizado centralizado.

nivel tecnico consenso distribuido la clave de cambio es una clase de portocolos protocolos bases ya usados en 
decadas de investigacion para llegar a los protocolos de consenso.


por ejemplo google o facebook cuentan con una gran cantidad de servidorees ofreciendo servicos de modo centralizado
como una base de datos masiva distribuida.
registra los cambios  independientes .servers con copias redundantes.
si cualquiera cae otros la levantan .similar a las rutas bgp en los mikrokit routers autenticas maquinas controladoras de  internet.

distribuido consenso.
creando una masiva red de consenso distribuyendo el valor clave,a gran escala .

ejemplo base de datos dns ip distribuido.
public key an email .

transferencias entre cuentas stock trades









05:02
consensus so what am I talking about here at a technical level the key challenge that you have to solve to
build a distributed ecash system is called distributed consensus and this is

a class of protocols that's been studied for decades in the in the computer science literature so but intuitively
you can think of it as our goal being to decentralize cruge coin which is the
hypothetical currency that we saw in the first lecture so as I said there's
decades of research in computer science traditional motivating application for
this is reliability and distributed systems what do I mean by that imagineon these consensus protocols and the



¿por qué protocolos de consenso?

1 confianza y ewstabilidad en sistemas distribuidos como motyivacion tradicional

2 almacen distribuido de claves : permitiendo varias aplicaciones como DNS , directorios de claves publicas, stock trades


un enorme almacen de claves para aplicaciones varias.
tecnicamente seria como tener un numero n de nodos o procesos y cada uno de estos nodos contiene un valor de entrada 
un imput .compitiendo para determinar cual es el valor correcto decidido por unamnimidad de los nodos participantes , 
se decide en comun un ganador previamente propuesto por un nodo participante y valido 

bitcoin es un sisterma con una red de pares iguales peer to peer.


alicia firma validada una transascion de pago a bob (a la clave publica de bob) msa el hash de las dos oeraciones qeu comoonen la transacion 
y la envia broadcasting a la red para validarla e incorporarla a la cadena de bloques en el siguiente 
turno o bitcoin generado o bloque en la cadena .

notamos que la pc de bob receptor no tiene porque ser un nodo .

como se establece el consenso ,las tansaciones se envian en secuencia -
en un momento determinado 
todos lso nodos contendran una secuencia de bloques de transaciones.
cada nodo tiene un conjunto de salidas de transaciones que estan siendo notificadas.
sucede en tiempo para sicronizar las transaciones .

tx tx 

tx tx
...
tx tx


you're in charge of the backend for a company like Google or Facebook these companies typically have thousands or

even millions of servers which form a
05:47
massive distributed database that
05:49
records all of the actions that happen
05:51
on the system like users comments and
05:53
likes and posts and so on so when a new
05:56
comment let's say comes in the way it'll
05:59
be recorded is that there might be ten
06:01
or fifteen different nodes in that
06:03
massive back-end that might contain
06:05
copies of this action now what the
06:07
server needs to make sure is that that
06:10
comment either gets recorded in all
06:11
copies of that database or none of them
06:13
if for some reason because some of these
06:16
nodes might be faulty the action gets
06:18
recorded in none of the databases it's
06:20
ok you can go back to the user and say
06:22
there was a problem saving your post
06:23
would you please try again on the other
06:25
hand if some of the copies of the
06:27
database saved it and others didn't then
06:30
you'd be in a lot of trouble because
06:31
you'd have an inconsistent database so
06:33
this is the key problem that motivated
06:34
the traditional research on distributed
06:37
consensus and you can sort of see the
06:39
similarities to Bitcoin here but we're
06:41
going to talk in a bit more detail about
06:42
the similarities and differences so that
06:45
was the traditional motivating
06:47
application but we can also imagine that
06:49
if we achieved a distributed consensus
06:52
protocol and we were able to use that to
06:55
build a massive
06:56
full-scale distributed key-value store
06:58
that maps arbitrary keys or names to
07:01
arbitrary values then that will enable a
07:03
lot of applications for example a
07:05
distributed domain name system which is
07:07
simply a mapping between human
07:09
understandable domain names to IP
07:11
addresses or a public key directory
07:13
which is a mapping between user email
07:16
addresses let's say to their public keys
07:18
or even things like stock trades because
07:21
this distributed database instead of
07:23
keeping track of who's paid whom how
07:25
much money would keep track of who's
07:27
transferred what units of which stock to
07:30
whom and the cool thing about this is
07:32
that now that Bitcoin has solved the
07:35
distributed consensus problem in a
07:37
certain sense that we'll try to
07:38
understand in this lecture we can also
07:40
go ahead and try to think about
07:42
solutions to all of these other related
07:44
problems and in fact there are many
07:46
altcoins in altcoins we'll have several
07:49
more lectures about altcoins but very
07:51
briefly altcoins
07:52
are systems built on Bitcoin like
07:55
principles to achieve perhaps slightly
07:56
different goals sometimes currency
07:58
systems sometimes not currency systems
08:00
such as one of these applications and so
08:02
given that we can solve distributed
08:05
consensus now and given that we can
08:07
build a global distributed key-value
08:08
store it enables a lot of these other
08:10
cool applications okay let's go to a
08:14
technical definition now the technical
08:16
definition of distributed consensus is
08:18
really quite simple imagine that there
08:20
is a fixed number n of nodes or
08:22
processes and each of these nodes has
08:25
some input value and then a consensus
08:29
protocol happens and the two
08:31
requirements on this consensus protocol
08:33
are that the protocol should terminate
08:35
and all correct nodes should decide on
08:37
some value the consensus value right
08:40
and I say correct nodes because some of
08:41
the nodes might be faulty or even
08:43
outright malicious and the second
08:45
requirement is that this value that they
08:47
agree upon cannot be an arbitrary value
08:49
but it should be a value that was
08:52
proposed as input by at least one of
08:54
these correct nodes so it's really that
08:57
simple
08:57
but let's try to see what this might
08:59
mean in the context of Bitcoin so to
09:02
understand how distributed consensus
09:04
could work in Bitcoin let's start with a
09:07
reminder that Bitcoin is a peer-to-peer
09:09
system
09:09
right so what I mean when I say that
09:11
bitcoin is a peer-to-peer system is that


09:14
when Alice wants to pay Bob
09:16
what she does is she's going to
09:18
broadcast a transaction to all of the
09:20
Bitcoin nodes that comprise the
09:22
peer-to-peer network and you can see
09:24
here the structure of the transaction
09:25
this is similar to goofy coin that we
09:28
saw in the first lecture and what a
09:30
transaction is going to have is it's
09:32
going to have Alice's signature which
09:34
the other nodes need in order to know
09:36
that it really in fact came from Alice
09:38
it's going to have Bob's public key
09:40
which also acts as his address at which
09:43
he wants to receive bitcoins
09:45
and further it contains a hash what is
09:48
this hash recall this notion of hash
09:51
pointers that we saw in the first
09:52
lecture so this hash is a way for Alice
09:55
to link together this transaction or
09:58
this coin to her receipt of this coin
10:01
from someone else previously right so
10:04
those are the things that are contained
10:06
in this data structure that we call a
10:07
transaction and she's going to broadcast
10:09
that to all of the Bitcoin peer-to-peer
10:11
nodes and notice something funny here
10:14
Bob's computer is nowhere in this
10:16
picture now Bob if he wants to be
10:19
notified that this transaction did in
10:21
fact happen and that he got paid he
10:23
might want to run a Bitcoin node that's
10:24
one of these peer-to-peer nodes in order
10:27
to listen in on the network and be sure
10:29
that he's received that transaction but
10:31
his listening is not in fact necessary
10:32
for him to receive the funds the
10:35
bitcoins will be his whether or not he's
10:37
running a node on the network so given
10:39
this peer-to-peer system what is it
10:41
exactly that the nodes might want to
10:43
reach consensus on well given that a
10:46
variety of users are broadcasting these
10:48
transactions to the network what
10:50
everybody wants to reach consensus on is
10:51
exactly which transactions were
10:53
broadcasted and the order in which these
10:56
transactions happened right so what does
10:59
that mean specifically how consensus
11:02
could work in Bitcoin is that at any
11:04
given time all the nodes in the
11:06
peer-to-peer network would have a
11:08
sequence of blocks of transactions that
11:10
they've reached consensus on so recall
11:13
that in Scrooge coin for optimization
11:15
purposes for efficiency we put
11:17
transactions into blocks and we link
11:19
these blocks together on a blockchain
11:21
so we're utilizing a similar principle
11:23
here we could do consensus on
11:25
transactions one by one that would be
11:26
okay it would just be an efficient so
11:29
instead we do consensus on a block by
11:31
block basis so at any given point all
11:34
these nodes in the peer-to-peer network
11:36
would have the sequence of blocks that
11:37
they've agreed upon already and each
11:40
node would then have a set of
11:42
outstanding transactions that it has
11:44
heard about so recall that for these
11:46
transactions consensus has not yet
11:48
happened and so almost by definition
11:50
each node might have a slightly
11:52
different version of the outstanding
11:54
transactions that it's heard about the
11:56
peer-to-peer network is not perfect so
11:57
some node may have heard about a
11:58
transaction but not other nodes so given
12:01
that we have the set up what could
12:03
happen is that you have the sequence of
12:06
blocks that everybody has agreed upon a
12:08
block is just a series of transactions
12:11
and now there are these let's say these
12:14
three nodes in the system each of whom
12:16
proposes each of whom has an input the
12:18
set of outstanding transactions that
12:20
it's heard about and they execute
12:22
together some consensus protocol and for
12:26
the consensus protocol to succeed you
12:28
can select any valid block even if it's
12:31
a block that was proposed by only one
12:32
node and for a block to be valid all of
12:35
these transactions have to have the
12:36
right crypto signatures and so on so you
12:40
could select any of these valid blocks
12:42
and the consensus protocol would still
12:45
be okay if some transactions somehow
12:47
didn't make it into this particular
12:48
block that gets chosen as the result of
12:50
a consensus protocol it could just wait
12:52
and get into the next block so maybe
12:54
this green block get selected it now it
12:57
gets added to the consensus blockchain
12:59
and then the protocol proceeds and
13:00
routes so if you took the traditional
13:03
theory of distributed consensus and
13:05
applied that to Bitcoin this is the sort
13:07
of system that you might end up with now
13:10
this has some similarities to how
13:12
Bitcoin works but it's not exactly how
13:14
Bitcoin works and why is that and the
13:16
reason for this is simple doing things
13:18
this way is a really hard technical
13:20
problem for a variety of reasons there
13:22
are some obvious ones nodes might crash
13:25
and nodes might outright be malicious
13:27
but also because the network is highly
13:30
imperfect it's a peer-to-peer system not
13:32
all pairs of nodes are connected to each
13:34
other
13:35
there could be faults in the network
13:36
because of poor internet connectivity
13:38
and so on and finally there's going to
13:41
be a lot of latency in the system
13:43
because all of these things happen over
13:45
the internet they're not even within a
13:46
single data center or something like
13:48
that and one particular consequence of
13:52
this high latency is that there is no
13:54
notion of global time what does this
13:56
mean and why is this important it means
13:58
that not all nodes can agree to a common
14:02
ordering of events simply based on
14:04
observing timestamps it just doesn't
14:06
work like that so you can't possibly
14:08
design your protocol by saying things
14:10
like take the node that sent the first
14:13
message in step one and have that node
14:15
do something in step two you just can't
14:17
work like that
14:17
because not all nodes will agree on
14:20
which message was sent first in the
14:22
first step of the protocol so this
14:24
really puts serious constraints on what
14:27
sorts of algorithms you can really put
14:29
into your consensus protocols and in
14:31
fact because of these constraints a lot
14:34
of the literature on distributed
14:35
consensus is somewhat pessimistic and
14:37
many impossibility results have been
14:39
proved I'm just going to name a couple
14:41
of these in case you want to look them
14:43
up but I won't go into too much detail
14:45
one impossibility result that's very
14:47
well known and pretty simple to
14:48
understand is called the Byzantine
14:50
generals problem and a much more subtle
14:52
one known for the names of the authors
14:55
who first proved it is called the Fisher
14:57
Lynch Patterson and possibility results
14:59
under some conditions which include the
15:02
nodes acting in a deterministic manner
15:03
what they proved is that consensus is
15:05
impossible even with a single faulty
15:08
process so despite these impossibility
15:10
results there are a few well-known
15:12
protocols and Paxos is probably one of
15:15
the better known and what Paxos does is
15:17
it makes certain compromises what it
15:20
gives you is that it never produces an
15:22
inconsistent result which would be
15:23
really bad but it accepts the trade-off
15:26
that under certain conditions albeit
15:28
rare ones the protocol can get stuck and
15:30
failed to make any progress but here's
15:33
the interesting thing
15:34
these impossibility results were you
15:37
know they were proved in a different
15:38
model they were intended to study
15:40
distributed databases and this model
15:41
doesn't carry over that well - this is a
15:45
setting that Bitcoin operates under so
15:47
what these results really tell us more
15:49
about them
15:49
model then about the problem in fact and
15:53
what bitcoin does is that it violates a
15:56
lot of the assumptions that go into
15:58
these models and because of that
15:59
consensus in Bitcoin ironically works
16:02
better in practice than in theory and
16:04
what this really means is that the
16:06
theory that was developed for a
16:08
different set of problems needs to catch
16:10
up in order to be able to say really
16:12
interesting things about Bitcoin but
16:14
nevertheless that theory is quite
16:15
important because for example it can
16:18
help us predict unforeseen attacks and
16:20
really be able to come to strong
16:23
guarantees on the nature of consensus
16:25
and security in Bitcoin so what are
16:29
these different assumptions what are
16:30
some things that Bitcoin does
16:31
differently well first of all it
16:33
introduces the idea of incentives and
16:35
this is very different from any previous
16:38
system for distributed consensus and
16:40
this is only possible in Bitcoin because
16:42
it is a currency and you can use that
16:44
currency to give incentives to the
16:46
participants for acting honestly and so
16:50
Bitcoin doesn't quite solve the
16:51
distributed consensus problem in a
16:53
general sense but it solves it in the
16:55
context of the currency system the other
16:57
thing that it does differently is that
16:59
it really embraces the notion of
17:00
randomness and what I mean by that is
17:02
one of the things it does is it does
17:04
away with the notion of a specific
17:06
starting point and ending point for
17:07
consensus instead consensus happens over
17:11
a long period of time about an hour in
17:13
the practical system and but even at the
17:15
end of that time you're not a hundred
17:16
percent sure that a transaction or a
17:19
block that you're interested in has made
17:20
it into the consensus blockchain instead
17:23
as time goes on your probability goes up
17:26
higher and higher and the probability
17:28
that you're wrong in making an
17:29
assumption about a transaction goes down
17:32
exponentially so that's the kind of
17:35
inherently probabilistic guarantee that
17:37
Bitcoin gives you and that's why it's
17:39
able to completely get around these
17:41
traditionally in traditional
17:43
impossibility results on distributed
17:44
consensus protocols
17:46
you
17:50
so let's now dig into the technical
17:52
details of bitcoins consensus algorithm
17:54
and while we're looking at that we
17:57
should keep in mind that Bitcoin does
17:58
all of this without nodes having any
18:01
persistent long-term identities and this
18:03
is yet again a difference from how
18:05
traditional distribute consensus
18:07
algorithms operated and if notes did
18:09
have identities it would make things a
18:11
lot easier for a couple of reasons one
18:13
is a pragmatic reason it would allow you
18:15
to put into your protocol things like
18:17
now the node with the lowest numerical
18:20
ID should take some step or something
18:22
like that so that's a simple pragmatic
18:24
reason which already if noes are
18:26
completely anonymous becomes harder to
18:27
do but a much more serious reason for
18:31
nodes to have identities as for security
18:33
because if nodes were identified and it
18:35
weren't trivial to create new nodes
18:37
ident node identities then we could make
18:40
assumptions like let's say that less
18:42
than 50% of the nodes are malicious and
18:44
we could derive security properties out
18:45
of that so for both of these reasons the
18:49
consensus protocol in Bitcoin is a bit
18:51
harder but why is it exactly the Bitcoin
18:54
nodes don't have identities well it's
18:56
for a couple of reasons
18:57
one is that if you're in a decentralized
18:59
model in a peer-to-peer system there is
19:01
no central authority to give identities
19:05
to nodes and verify that they're not
19:06
creating new nodes at will and in fact
19:10
the technical term for this is a Sybil
19:11
attack
19:12
Sybil's are just copies of nodes that a
19:14
malicious adversary can create to look
19:16
like there are a lot of different
19:18
participants when in fact all those
19:19
pseudo participants are really
19:21
controlled by the same adversary the
19:24
other reason is that pseudonymity
19:26
is inherently a goal of Bitcoin even if
19:28
it were possible or easy to establish
19:30
identities for all nodes or all
19:32
participants we wouldn't necessarily
19:34
want to do that so bitcoin doesn't give
19:37
you strong anonymity guarantees out of
19:39
the box and that's the different
19:41
transactions that you make can probably
19:43
be linked together but at the same time
19:45
nobody is forcing you to put your real
19:48
life identity like your name or IP
19:51
address or anything like that
19:52
in order to participate in the
19:54
peer-to-peer network and in the
19:55
blockchain and that's an important
19:56
property so what we can do instead is we
20:02
can make a weaker assumption
20:04
and I kind of want you to take a leap of
20:06
faith with me here that this weaker
20:08
assumption is something that it's going
20:11
to be feasible and I'm going to make
20:12
this assumption here and later show you
20:14
how this is actually accomplished and
20:16
what this weaker assumption is is that
20:18
we're going to assume that there is some
20:20
ability somehow to pick a random node in
20:22
the system and a good motivating analogy
20:25
for this it's a lottery or a raffle or
20:28
any number of real-life systems
20:30
we're tracking and verifying people and
20:32
giving them identities and verifying
20:34
those identities is pretty hard and so
20:36
what we do in those contexts is we might
20:37
give them tokens or tickets or something
20:40
of that sort and that then enables us to
20:42
later pick a random token ID and call
20:44
upon that person so we're going to do
20:47
something similar with respect to these
20:48
Bitcoin notes and further assume for the
20:51
moment that this token generation and
20:53
distribution algorithm has enough smarts
20:55
so that if the adversary is going to try
20:58
to create a lot of Sybil nodes together
21:00
all of those symbols just get one token
21:02
so the adversary is not able to multiply
21:04
his power that way so let's make this
21:07
assumption for now and let's see what
21:09
becomes possible if we make this
21:11
assumption here's the key idea what
21:14
becomes possible under this assumption
21:16
of random node selection is something
21:19
called implicit consensus so what is
21:22
implicit consensus in each round and
21:24
there are going to be multiple rounds
21:26
each run corresponding to a different
21:27
Block in the blockchain in each round a
21:30
random node is somehow selected
21:31
magically for the moment and this node
21:34
gets to propose the next block in the
21:35
chain there is no consensus algorithm
21:37
there is no voting this node simply
21:39
unilaterally proposes what the next
21:41
block and the blockchain is going to be
21:43
but what if that node is malicious well
21:46
there is a process for this but it is an
21:49
implicit one other nodes will implicitly
21:51
accept or reject that block and how will
21:54
they do that if they accept that block
21:56
they will signal signal that acceptance
21:58
by extending the blockchain starting
22:01
from that block or if they reject that
22:03
block they will extend the chain by
22:05
ignoring that block and starting from
22:07
whatever was the previous latest block
22:10
in the blockchain and technically how is
22:13
that implemented recall that each block
22:15
contains a hash of the block that it
22:18
and this is the technical mechanism that
22:21
allows needs to signal which block it is
22:23
that they're extending so given this
22:27
this is what the overall consensus
22:29
algorithm in Bitcoin is going to look
22:31
like now this is a little bit simplified
22:33
and the reason it's simplified is again
22:35
that I'm assuming sort of this magic
22:37
random node selection process but except
22:40
for that simplification this is pretty
22:42
close to how Bitcoin actually works
22:44
so whenever Alice wants to pay Bob she
22:47
will create a transaction and she will
22:49
broadcast it to all of the nodes and any
22:52
one of these nodes is constantly
22:53
listening to the network and collecting
22:55
a list of outstanding transactions that
22:57
have not yet made it into the blockchain
22:59
at some point one of these nodes is
23:02
going to be randomly called upon to
23:03
propose the next block it's going to
23:05
round up all of the outstanding
23:07
transactions that it's heard about and
23:08
propose that block now presumably that
23:12
node was honest but it could also be a
23:14
malicious node or a faulty node and
23:16
propose a block that contains some
23:18
invalid transactions invalid
23:20
transactions are those that don't have
23:23
the right crypto signature or where the
23:26
transaction is already spent in other
23:27
words an attempt to double spend so if
23:30
that happens other nodes are going to
23:33
signal their acceptance or rejection of
23:35
the block as we saw on the last slide by
23:37
either including the hash of this latest
23:39
block in their next block or ignoring
23:42
this block and including the hash of
23:44
whatever was the previous block that
23:46
they consider it to be valid all right
23:49
so now let's try to understand why this
23:51
consensus algorithm works and the way I
23:53
like to understand this is instead of
23:55
asking why this works let's try to ask
23:57
how can a malicious adversary try to
24:00
subvert this process so let's look at
24:03
that for a second so here we have a
24:05
couple of blocks in the blockchain
24:07
assume that this extends to the left a
24:09
long way back all the way to what is
24:11
called the Genesis block but here I'm
24:13
only showing you a couple of blocks in
24:15
the blockchain and that pointer that you
24:16
see over there is a block referring to
24:20
what is the previous block that it
24:21
extends by including a hash of that
24:24
previous block within its own contents
24:26
so let's Tamil Isha's attacker let's
24:29
call her Alice what might she try to do
24:32
can she simply steal bitcoins belonging
24:35
to another user at a different address
24:36
that she doesn't control now even if it
24:40
is now Alice's turn to propose the next
24:43
block in this chain she cannot steal
24:45
other users bitcoins why because she
24:48
cannot Forge their signatures so as long
24:50
as the underlying crypto is solid she's
24:52
not able to simply steal bitcoins
24:54
another thing she might try to do is if
24:57
she really really hates some other user
24:59
Bob then she can look at Bob's address
25:01
and she can decide that any transactions
25:04
originating from Bob's address she will
25:06
simply not include them in any block
25:08
that she proposes to get onto the
25:10
blockchain in other words she's denying
25:13
service to Bob so this is a valid attack
25:15
that she can try to mount but luckily
25:18
it's nothing more than a little
25:19
annoyance because if Bob's block doesn't
25:22
make it into the next block that alice
25:23
proposes he will just wait another block
25:26
until an honest node gets the chance to
25:28
propose a block and then his transaction
25:30
will get into that block so that's not
25:32
really a good attack either so the only
25:34
one that were really left with for what
25:36
a malicious node can try to do here is
25:38
called a double spending attack so how
25:41
might a double spending attack work to
25:43
understand that let's assume that alice
25:45
is a customer of some online merchant or
25:49
a website run by bob who provides some
25:52
online service in exchange for payment
25:54
in bitcoins let's say he allows us to
25:56
download of some software so here's how
25:58
a double spending attack might work
26:00
Alice goes to Bob's website and decides
26:04
to buy this item pays for it with
26:06
bitcoins and what that means in
26:08
technical terms is that she is going to
26:10
create a Bitcoin transaction from her
26:13
address - Bob's address she broadcasts
26:16
it to the network and let's say that
26:18
some honest node creates the next block
26:21
listens to this transaction and includes
26:24
it in that block so what is going on
26:27
here so there is this block that was
26:29
created by an honest node that contains
26:31
a transaction that represents a payment
26:34
from Alice to the merchant Bob by C
26:36
subscript a I mean a coin belonging to
26:39
Alice and that is now being sent to
26:41
Bob's address let's zoom into this and a
26:44
little bit more technical
26:45
Tail a transaction as we saw earlier as
26:48
a data structure that contains Alice's
26:51
signature here and an instruction to pay
26:53
to Bob's public key and also a hash
26:56
what is this hash this hash represents a
26:58
pointer to the transaction where Alice
27:01
in fact received that coin from somebody
27:03
else and that must be a pointer to a
27:05
transaction that was included in some
27:08
previous block in the consensus chain so
27:10
visually it's going to look something
27:11
like this let's pause for a second here
27:15
because there is something subtle going
27:17
on there are at least two different
27:19
types of pointers in this diagram that
27:21
I've showed you there is in fact a third
27:23
one corresponding to Merkel trees but
27:24
we're not going to look at that at the
27:26
present moment but these two types of
27:29
pointers that I refer to are blocks that
27:33
include a hash of the previous block
27:34
that they're extending and transactions
27:37
that include a pointer to whatever the
27:40
previous transaction that where the coin
27:42
came from right so this is the situation
27:45
and this block was now generated by an
27:50
honest node and now let's assume that
27:52
the next time a random note is called
27:55
that node is a malicious node controlled
27:59
by Alice right so this is the blockchain
28:01
as it stands right now bob has already
28:03
looked at this blockchain decided that
28:05
alice has paid him and has allowed Alice
28:08
to download the software or whatever it
28:10
is that she was buying on his website
28:12
right so as far as Bob is concerned he's
28:15
satisfied the transaction is completed
28:16
Alice has now received her goods in
28:19
exchange for the payment now what might
28:21
happen is if Alice now gets to propose
28:24
the next block she could propose a block
28:26
that looks like this ignores altogether
28:29
this valid block over here and instead
28:32
contains a pointer to the previous block
28:34
and furthermore it's going to contain a
28:38
transaction that contains a transfer of
28:41
coins of Alice's coins to another
28:43
address a prime that's also controlled
28:45
by Alice so this is a classic double
28:49
spend pattern what is going on here is
28:51
Alice now creates a new transaction that
28:55
transfers that coin instead of to Bob's
28:57
address to another address
28:59
by her and visually it's going to look
29:01
like this this is a completely different
29:02
transaction also with the hash pointer
29:04
going back to the same transaction
29:06
referred to earlier right so this is
29:09
what an attempt at a double spend look
29:11
like and how do we know if this double
29:14
spend attempt is going to succeed or not
29:16
well that depends on whether this green
29:19
transaction here or this red transaction
29:21
is going to ultimately end up in the
29:23
long term consensus chain so what
29:26
determines that that is determined by
29:28
the fact that honest nodes are always
29:31
following the policy of extending the
29:33
longest valid branch so now which of
29:36
these is the longest valid branch you
29:38
might look at this and say AHA the first
29:40
one is the longest valid branch not the
29:42
second one because it's a double spent
29:43
attempt but here's a very subtle point
29:46
that I want you to appreciate from sort
29:48
of a moral point of view this
29:50
transaction in green in the transaction
29:51
red might look very different because
29:54
based on the explanation that I've given
29:57
you the first one is an attempt by Alice
29:59
to pay Bob whereas the second one is an
30:01
attempt by Alice to defraud Bob and pay
30:04
coins back to herself but from a
30:06
technological point of view these two
30:08
transactions are completely identical
30:10
the nodes that are looking at this
30:12
really have no way to tell which one is
30:14
the legitimate transaction and putting
30:16
legitimate in air quotes because it's a
30:18
moral judgement that we apply to it it's
30:20
not a technical distinction versus which
30:23
one is the attempt to double spend it
30:24
could easily be the other way around
30:26
now nodes often follow a heuristic of
30:30
extending the block that they first
30:31
heard about on the peer-to-peer network
30:33
but it's not a solid rule and in any
30:35
case because of network latency that
30:37
could easily be the other way around so
30:41
now there is at least some chance that
30:43
the next node that gets to propose a
30:45
block will extend this block instead of
30:47
this one or it could be that even if
30:49
it's an honest node Alice could try to
30:51
bribe that node or try to subvert the
30:53
process in a variety of ways so for
30:55
whatever reason without going too much
30:57
into the details let's say that the next
30:59
node extends the block with the red
31:01
transaction instead of the green one
31:03
what this means is that at this point
31:06
the next honest node is much more likely
31:08
to extend this block instead of this one
31:10
because now this has become the long
31:12
valo chain so let's say that after one
31:16
more block the situation looks like this
31:17
now it's starting to look pretty likely
31:19
that this double spin has succeeded in
31:21
fact what might happen is that this ends
31:24
up the long term consensus chain and
31:26
this block gets completely ignored by
31:29
the network and this is now called an
31:31
orphan block and this is an example of a
31:34
successful double spend so now let's
31:36
look at this whole situation from Bob
31:38
the merchants point of view and
31:40
understanding how Bob can protect
31:42
himself from this double spending attack
31:43
it's really going to be a key part of
31:45
understanding Bitcoin security so let's
31:47
look at what happened here again we have
31:50
a couple of blocks in the blockchain and
31:52
at this point
31:54
Alice broadcasts a transaction that
31:56
represents her payment to Bob and so Bob
31:58
is going to hear about it on the
32:00
peer-to-peer network right here even
32:02
before the next block gets created and
32:04
so Bob can do something even more
32:07
foolhardy that what he did in the
32:09
previous light which is that as soon as
32:11
he hears about the transaction on the
32:12
peer-to-peer network he can complete the
32:14
transaction on the website and allow
32:16
Alice to download whatever she is
32:18
downloading that's called a zero
32:20
confirmation transaction or he could
32:24
wait until the transaction gets one
32:26
confirmation in the blockchain which
32:28
means that at least some node has
32:32
created a block and has proposed this
32:35
transaction and that has gone into the
32:37
blockchain but as we saw earlier even
32:40
after one confirmation there could be an
32:42
attempt at a double spend so let's say
32:44
that this actually happens if as in the
32:47
previous slide the double spend attempt
32:49
succeeds what Bob should do is to
32:51
realize that the block that he thought
32:53
represented Alice paying him has now
32:56
been orphaned and she's and so he should
32:57
abandon the transaction instead if it so
33:01
happens that despite this double spent
33:02
attempt the next block that's generated
33:05
turns out to extend the block that he's
33:08
interested in now he sees that his
33:11
transaction has two confirmations in the
33:13
blockchain now he gets a little bit more
33:16
confidence that his transaction is going
33:18
to end up on the long-term consensus
33:19
chain so let's say there's one more and
33:22
now there are three confirmations in
33:24
general
33:25
the more confirmations your transaction
33:27
gets the higher the probability that it
33:29
is going to end up on the long-term
33:31
consensus chain because if you recall
33:33
the honest nodes behavior that they will
33:35
always extend the longest valid branch
33:38
that they see the chance that this one
33:40
is going to catch up to this longer
33:42
branch is now very minuscule especially
33:45
if only a minority of the nodes are
33:47
malicious because it typically the only
33:50
reason that this double span attempt
33:52
block would be extended at this point is
33:54
if the next node to be picked randomly
33:56
was a malicious node and then you'd need
33:58
another malicious node and then another
33:59
for the shorter branch to then become
34:01
the longer branch in general the double
34:06
span probability decreases exponentially
34:09
with the number of confirmations so if
34:12
the transaction you're interested in has
34:14
received K confirmations then the
34:16
probability that this other transaction
34:17
is going to end up on the long term
34:19
consensus chain goes down exponentially
34:21
as a function of K in the most common
34:24
heuristic that's used in the Bitcoin
34:26
ecosystem is that you wait for six
34:28
confirmations there is nothing really
34:30
special about the number six it's just a
34:32
good trade-off between the amount of
34:34
time you have to wait and your guarantee
34:36
that the transaction you're interested
34:38
in ends up on the consensus watching so
34:42
let's recap what we saw here protection
34:46
against invalid transactions that is
34:48
protection against a malicious node
34:49
simply making up a transaction to steal
34:51
someone's bitcoins is entirely
34:53
cryptographic but it is enforced by
34:56
consensus which means that if a node
34:59
does attempt that then the only reason
35:01
that that transaction won't end up in
35:03
the long term consensus chain is because
35:05
a majority of the nodes are honest and
35:06
will treat that transaction as invalid
35:08
on the other hand protection against
35:11
double spending is purely about
35:12
consensus
35:13
cryptography has nothing to say about
35:15
this and true transactions that
35:17
represent a double spending attempt kind
35:20
of look identical from the perspective
35:22
of signatures and so on but it's the
35:24
consensus that determines which one will
35:26
end up on the long term consensus chain
35:28
and finally you're never 100% sure that
35:31
a transaction you're interested in is on
35:33
the consensus branch but this
35:35
exponential probability guarantee is
35:37
pretty good after about six transaction
35:39
there's virtually no chance that that
35:41
you're going to go wrong
35:48
so in the previous section we got a
35:51
basic look at bitcoins consensus
35:53
algorithm and a good intuition for why
35:56
we believe that it's secure but recall
35:58
that at the beginning of the lecture I
36:00
told you that bitcoins decentralization
36:02
is partly a technical mechanism and
36:04
partly clever incentive engineering
36:06
so far we've mostly looked at the
36:08
technical mechanism now let's talk about
36:10
the incentive engineering that happens
36:12
in Bitcoin I asked you to take a leap of
36:16
faith with me earlier in assuming that
36:18
we're able to pick a random node and
36:20
perhaps more problematically that at
36:23
least 50% of the time this process will
36:25
pick an honest node but of course this
36:27
assumption of honesty is quite
36:28
problematic especially if there are
36:30
financial incentives for participants to
36:32
subvert this then why would we expect
36:34
any node to be honest really so what we
36:36
want to ask is can we give nodes an
36:39
incentive for behaving honestly let's
36:41
look at this with respect to the picture
36:43
we've been looking at this is the
36:45
long-term consensus chain and this block
36:47
contains an attempt to double spend we
36:50
can ask can we penalize somehow the node
36:52
that created this block but this is
36:55
problematic for a number of reasons
36:56
including the fact that nodes don't have
36:58
identities and so there's no way to go
37:00
after them to penalize them so instead
37:02
let's flip the question around and ask
37:04
can we reward the nodes that created all
37:07
these blocks that did end up on the long
37:09
term consensus chain well again sort of
37:12
the same problem we don't have no
37:13
identities so we can't mail them cash to
37:16
their home addresses if only there were
37:18
some sort of digital currency than we
37:20
can use to incentivize them a
37:21
decentralized one perhaps you probably
37:24
see where I'm getting at in other words
37:26
we're going to use bitcoins in order to
37:29
incentivize the nodes that created these
37:32
blocks so how are we going to do that
37:33
well so far everything that I've said is
37:36
just an abstract algorithm for achieving
37:39
distributed consensus now we're going to
37:41
break out of that model what I'm going
37:42
to say now is specific to the fact that
37:44
what we're achieving through this
37:46
distributed consensus process is in fact
37:48
a currency and we're going to
37:49
incentivize these nodes by paying them
37:52
in units of this currency so how do we
37:56
do that there are in fact two separate
37:58
incentive mechanisms in Bitcoin and the
38:00
first one is
38:01
called the blocker ward so what is the
38:03
block reward it's just this according to
38:06
the rules of Bitcoin the node that
38:08
creates each block gets to include a
38:11
special transaction in that block and
38:12
that special transaction is a coin
38:15
creation transaction and this node can
38:18
also choose the recipient address of
38:20
this transaction so of course that node
38:22
will typically choose an address
38:24
belonging to itself as the recipient of
38:26
this coin creation transaction thereby
38:28
paying itself it's sort of you can think
38:30
of it as a payment in exchange for the
38:32
service of creating that block to go on
38:35
to the Consensus chain in fact the value
38:39
of this coin creation transaction has an
38:42
interesting property it's critics at 25
38:45
bitcoins but it actually has every four
38:48
years we're now in the second period for
38:51
the first four years of bitcoins
38:52
existence it was 50 bitcoins now it's 25
38:54
and it's going to keep having this has
38:57
some interesting consequences we'll come
38:58
back to that in the next slide but let
39:00
me ask you this it appears based on what
39:02
I've said here that this node gets the
39:05
block reward regardless of whether it
39:08
proposes a block with only valid
39:10
transactions or it behaves maliciously
39:12
so how are we actually providing any
39:15
incentives for honest behavior via this
39:17
block reward but I thought think about
39:20
this well how will the snowed sort of
39:22
get to collect its reward that will only
39:25
happen if this block ends up on the long
39:28
term consensus branch because that's the
39:30
only case in which this coin creation
39:34
transaction will be considered valid
39:35
because the coin creation transaction is
39:37
not special it's just like every other
39:39
transaction it's only valid if it ends
39:41
up on the consensus chain so that's the
39:43
incentive mechanism here it's very
39:44
subtle but it's a very neat trick and so
39:47
it incentivizes nodes to behave honestly
39:49
or at the very minimum it incentivizes
39:51
nodes to behave in a way that they think
39:54
other nodes are going to agree with in
39:57
creating the next blocks of the
39:59
blockchain so that's the first instead
40:03
of mechanism let's come back to this
40:04
point now this weird sort of having
40:08
phenomenon that we see here and this can
40:12
be best illustrated graphically here I'm
40:14
going to show you
40:15
graph of time on the x-axis versus the
40:19
total number of bitcoins in circulation
40:20
and this over here was the first period
40:24
where each block resulted in 50 new
40:27
bitcoins being created and roughly at
40:30
the end of last year that block reward
40:31
halves from 50 to 25 and you can see
40:34
that every four years extending well
40:36
into the future the slope of this curve
40:38
is going to keep having and this is a
40:41
geometric series and you might know that
40:43
it means that there is a finite sum and
40:45
in fact there is a total finite supply
40:47
of bitcoins and if you add up all these
40:49
numbers it works out to 21 million based
40:52
on the rate of new block creation which
40:54
I'm going to get to in a second also
40:56
worth noting is that this is the only
40:58
way in which new bitcoins are created
40:59
there is no other coin generation
41:02
mechanism and that's why this is a final
41:04
and total number as a rule Sandow at
41:06
least
41:06
for how many bitcoins there can ever be
41:09
and this new block creation reward is
41:12
actually going to run out in 2040 as
41:14
things stand now so that sounds a bit
41:17
weird does that mean that the system
41:20
will stop working in 2040 and become
41:22
insecure because nodes no longer have
41:25
the incentive to behave honestly well
41:27
not quite because this is only the first
41:29
of two incentive mechanisms there is
41:31
quite another incentive mechanism called
41:33
the transaction fee and what is a
41:35
transaction fee so the creator of any
41:38
transaction not the creator of a block
41:40
with the creator of a transaction when
41:41
Alice is paying Bob what she can do is
41:44
she can choose to make the output value
41:46
of that coin less than the input value
41:48
and the way that all the nodes interpret
41:52
this difference according to the rules
41:53
of Bitcoin is that it's a transaction
41:55
fee and whoever creates the block that
41:58
first puts that transaction into the
42:00
blockchain gets to collect that
42:02
transaction fee so if you're a node
42:05
that's creating a block that contains
42:06
say 200 transactions then the sum of all
42:10
those 200 transaction fees accrues to
42:12
you and to the address that you put into
42:14
that block of course this transaction
42:17
fee is purely voluntary like a tip but
42:19
it we expect based on our understanding
42:22
of the system that as the block reward
42:24
starts to run out it will become more
42:27
and more important
42:28
most mandatory four nodes to put a
42:31
transaction fee into their transactions
42:33
in order to get a reasonable quality of
42:35
service and to a certain degree this is
42:37
already starting to happen now
42:39
but precisely how the system will evolve
42:41
it really depends on a lot of game
42:43
theory which hasn't been fully worked
42:45
out yet so that's an interesting area of
42:47
open research in Bitcoin so now we've
42:50
acquired an understanding of how the
42:52
nodes that create these blocks are
42:53
incentivized to act honestly or follow
42:56
the protocol and so if we address a few
42:58
more of these remaining problems we'll
43:00
be all set to have a really good
43:02
understanding of how Bitcoin achieves
43:03
decentralization
43:04
what are these remaining problems well
43:06
one of them the first major one is the
43:08
leap of faith that I asked you to take
43:09
which is that somehow we can pick a
43:11
random node and the second is that we've
43:14
created a new problem by giving nodes
43:16
these block rewards and incentives which
43:18
is that you could easily get into a
43:20
free-for-all where everybody wants to
43:21
run a Bitcoin node in the hope of
43:23
capturing some of these rewards and a
43:26
third one is an even trickier version of
43:28
this problem which is that an adversary
43:30
might create a whole different number of
43:33
civil nodes in order to really try to
43:36
subvert this consensus process so number
43:38
three is sort of a trickier version of
43:40
number two
43:41
it turns out that all of these problems
43:43
are related and all of them have the
43:45
same solution and that solution is
43:47
called proof of work so what is proof of
43:49
work here's the key idea instead of
43:53
picking a random node we do something a
43:56
little bit different which is we
43:58
approximate selecting a random node by
44:00
instead selecting nodes and proportion
44:02
to a resource that we hope that nobody
44:04
can monopolize what does that mean well
44:07
if that resource that we're talking
44:09
about is computing power then it's a
44:11
proof of work system where we somehow
44:13
select nodes in proportion to their
44:15
competing power alternately it could be
44:19
in proportion to ownership of the
44:20
currency and this is a legitimate
44:22
alternate model it's not used in Bitcoin
44:24
but it's been proposed and it's used in
44:26
a lot of alternatives to Bitcoin and
44:27
that's called proof of stake which we'll
44:30
see in a later lecture but let's come
44:32
back to proof of work let's try to get a
44:34
better idea of what this means selecting
44:37
nodes in proportion to their computing
44:39
power another way to understand this
44:41
is that we're allowing nodes to compete
44:43
with each other by using their computing
44:47
power and that will result in nodes
44:49
automatically being picked in that
44:51
proportion so those are two equivalent
44:54
ways to view proof-of-work you can also
44:57
think of a third way which is that we're
44:59
making it moderately hard that through
45:01
proof-of-work to create new identities
45:03
so it's a sort of attacks on identity
45:06
creation and on the Sybil attack this
45:09
may all appear a bit vague so let me
45:11
actually go ahead and show you what is
45:13
the exact proof-of-work system that's
45:15
used in Bitcoin and that's going to make
45:16
things a lot clearer so here it is it's
45:20
called hash puzzles and what this means
45:23
is that in order to create a block the
45:26
node that proposes that block is
45:28
required to find a number a nonce such
45:31
that when you put together in the block
45:34
the nonce the previous hash and the list
45:37
of transactions that comprise that block
45:39
and take the hash of this whole long
45:42
string then that hash output should be a
45:46
number that is very small that falls
45:48
into this small target space here in
45:50
relation to this very large space that
45:52
is the output space of that hash
45:54
function let's look at it one more time
45:57
as we looked at it earlier normally a
45:59
block contains a series of transactions
46:01
that you're proposing in addition a
46:03
block also contains a pointer to the
46:05
previous block as we saw and a pointer
46:07
is just a string in this context but in
46:10
addition here we're requiring that a
46:12
block also contain a nonce and why is
46:15
this and the idea is that we want to
46:17
make it moderately difficult to in fact
46:20
find nonce that satisfies this required
46:23
property which is that hashing the whole
46:25
block together including that nonce is
46:27
going to result in a particular type of
46:30
output and so we believe that if the
46:33
hash function is secure then the only
46:36
way to succeed in solving this hash
46:37
puzzle is to just try enough nonsense
46:39
one by one until you get lucky so
46:42
specifically if this target space were
46:45
just 1% of the overall output space you
46:47
would have to try about a hundred nonces
46:49
before you got lucky and if this hash
46:52
function were to behave essentially
46:54
random
46:54
the only one in a hundred nonces will
46:57
result in an output that falls within
46:59
this target space in fact the size of
47:02
this targets phase is not nearly as high
47:04
as one percent of the output space it's
47:05
much much smaller than that which we'll
47:08
get to in a second but fundamentally
47:11
this is the computational problem that a
47:14
node is required to solve in order to
47:16
produce the block now this notion of
47:20
hash puzzles in proof of work completely
47:22
does away with the requirement for
47:25
somebody somehow to pick a random node
47:27
instead nodes are simply all the time
47:30
independently competing to solve these
47:32
hash puzzles and once in a while one of
47:36
them will get lucky and will find a
47:38
random nonce that satisfies this
47:40
property and that node then gets to
47:43
propose the next block that's how it's
47:46
completely decentralized there is nobody
47:48
deciding which node it is that gets to
47:50
propose the next block so let's look at
47:53
it in a little bit more detail now there
47:55
are three properties that I want to show
47:57
you essential properties of this
47:59
proof-of-work function of this hash
48:01
puzzle and the first is that it needs to
48:04
be quite difficult to compute I said
48:05
moderately difficult but what I mean by
48:07
moderately difficult as of today and
48:09
you'll see why it varies with time it's
48:11
about ten to the twenty hashes for a
48:13
block that you need to compute so the
48:16
size of the target space is only one
48:18
over ten to the twenty of the size of
48:20
the output space of this hash function
48:22
all right so it's in if you look at it
48:25
in terms of the amount of computing that
48:27
your laptop needs to do for example this
48:29
is simply a humongous and infeasible
48:30
number and because of this only some
48:34
nodes even bother to compete in this
48:37
block creation process and this is what
48:39
is known as Bitcoin mining basically the
48:41
process of repeatedly trying and solving
48:43
these hash puzzles and we call these
48:45
nodes miners and because of how capital
48:49
incentive this process is this goes back
48:51
to what I said at the beginning that
48:52
even though technically anybody can be a
48:54
miner there's been a lot of
48:56
concentration of power or concentration
48:58
of participation in the mining ecosystem
49:01
so that's the first property of these
49:04
proof-of-work puzzles
49:07
the second property is that we want this
49:10
cost to be parameterize Abul it's not a
49:12
cost that that is fixed over all time
49:14
and the way that that's accomplished is
49:16
that all the nodes in the Bitcoin
49:17
peer-to-peer network will automatically
49:20
recalculate the target that is the size
49:22
of the target space as a fraction of the
49:25
output space every two weeks and they do
49:27
it in such a way that they maintain this
49:29
invariant which is that the average time
49:32
between any two successive walks produce
49:34
globally in the overall Bitcoin network
49:37
is about ten minutes so let's think
49:40
about what this means what this means is
49:43
that if you're a miner and you've
49:44
invested a certain fixed amount of
49:46
hardware into Bitcoin mining but the
49:50
overall mining ecosystem is growing more
49:52
miners are coming in where they're
49:54
deploying faster and faster hardware
49:55
that means that over a two-week period
49:58
slightly more blocks are going to be
50:00
found and expected and so nodes will
50:03
automatically readjust the target and so
50:06
the amount of work that you have to do
50:08
to be able to find a block is going to
50:10
increase so if you put in a fixed amount
50:12
of hardware investments the rate at
50:15
which you find blocks is actually
50:17
dependent upon what other miners are
50:19
doing so there's a very nice formula to
50:21
capture this which is that the
50:23
probability that any given miner alice
50:25
is going to win the next block is
50:27
equivalent to the fraction of global
50:30
hash power that she controls which means
50:33
that if she has mining Hardware that's
50:35
about 0.1 percent of total hash power
50:38
she will compute roughly one in every
50:40
thousand blocks so why does this
50:43
readjustment happen why do we want this
50:45
want to maintain this ten-minute
50:46
invariant well the reason is simple if
50:49
walks were to come very close together
50:51
then there would be a lot of
50:53
inefficiency and we would lose the
50:55
optimization benefits of being able to
50:57
put a lot of transactions as it
50:59
currently stands several hundred
51:01
transactions in a single block if you
51:03
went down from ten minutes to five
51:04
minutes it would probably be okay
51:06
and there are a lot of discussions about
51:07
if we're doing an altcoin now what is
51:10
the block latency that we should have
51:12
but everybody agrees that the block
51:14
latency should be a fixed amount it
51:16
cannot be allowed to go down without
51:18
and that's why you have this automatic
51:21
target recalculation property now
51:26
because of the way that this cost
51:29
function and proof-of-work is set up it
51:31
allows us to reformulate our security
51:34
assumption here's where we finally
51:36
depart from the leap of faith that I
51:37
asked you to take several slides ago
51:39
instead of saying that somehow the
51:41
majority of nodes are honest in a
51:44
context where nodes don't even have
51:45
identities and not being clear about
51:47
what that means we can now state crisply
51:49
that a lot of attacks on Bitcoin are
51:51
infeasible if the majority of miners
51:54
waited by hash power are following the
51:56
protocol or are honest and the reason
51:59
for that is if a majority of miners
52:01
waited by hash power or honest because
52:03
of this competition for proposing the
52:05
next block this will automatically
52:07
ensure that there is at least a 50%
52:09
chance that the next block to be
52:11
proposed at any point is coming from an
52:13
honest node instead of a malicious one
52:17
let's now look at the consequences of
52:20
the fact that solving hash puzzles is
52:23
probabilistic why is it probabilistic
52:25
because nobody can predict which nons is
52:28
going to result in solving the hash
52:30
puzzle the only way to do it is to try
52:32
nonsense one by one and hope that one
52:34
succeeds right and so this process is
52:37
called mathematically Bernoulli trials I
52:40
want to I won't go into detail on that
52:41
but you can look it up but typically
52:44
nodes try so many nonces that a discrete
52:48
probability process called Bernoulli
52:50
trials can be well approximated by a
52:52
continuous probability process called a
52:55
Poisson process and the end result of
52:59
all of that is that the distribution the
53:02
probability density function of the time
53:05
to find the next block by any node in
53:07
the network globally looks something
53:09
like this it's called an exponential
53:11
distribution but really the upshot is
53:13
that there is some small probability
53:14
that if a block has been found now the
53:17
next block is going to be found very
53:18
soon or within a few seconds or within a
53:20
minute and there's also some small
53:23
probability that it will take a long
53:25
time maybe an hour to find the next
53:27
block but overall the network
53:29
automatically adjust the difficulty so
53:31
that
53:32
the inter blog time is maintained at an
53:34
average long-term of 10 minutes right so
53:39
this is a graph that shows how
53:41
frequently blocks are going to be
53:43
created by the entire network not caring
53:45
about which minor this is coming from if
53:48
you're a minor specifically interested
53:50
in how quickly you're finding blocks
53:52
what does this probability density
53:54
function look like well it's going to
53:55
have the same shape but it's just going
53:58
to have a different scale on the x-axis
53:59
again it can be represented by a nice
54:02
equation for a specific minor the mean
54:05
time to find a block given that you've
54:07
just found a block is going to be ten
54:09
minutes divided by the fraction of hash
54:12
power that you control so again if you
54:14
have 0.1% of the total network hash
54:16
power you're going to find blocks once
54:18
every 10,000 minutes which is several
54:21
days and so not only is your mean time
54:24
between blocks going to be very high the
54:26
variance of the time between blocks
54:27
found by you is also going to be very
54:29
high and this has some important
54:31
consequences that we're going to be
54:33
looking at in later lectures so now
54:36
let's turn to the third important
54:38
probability of this proof-of-work
54:40
function which is that it's actually a
54:42
trivial to verify that in a node has
54:45
computed proof-of-work correctly what
54:47
does that mean even if it takes a node
54:49
on average 10 to the 20 tries to find a
54:53
nonce that succeeds in finding the right
54:57
property of the hash function that nonce
54:59
must be published as part of the block
55:01
so it's trivial for any other node to
55:04
look at the block contents hash them all
55:06
together and verify that the output is
55:09
less than the target so this is an
55:12
important property because once again it
55:14
allows you to get rid of centralization
55:15
you don't need any centralized Authority
55:18
verifying that miners are doing their
55:20
job correctly any node or any miner can
55:23
instantly verify that a block found by
55:26
another miner satisfies this proof of
55:28
work property and thereby they can be
55:30
sure that this miner put in a lot of
55:32
computing power into finding that block
55:39
let's now look at mining economics
55:42
because we've said that it's quite
55:43
expensive for miners to be an operation
55:46
because finding a single block takes
55:48
computing about ten to the twenty hashes
55:50
at the same time we've also seen that
55:52
the block reward is about 25 bitcoins
55:54
which is quite a lot of money so it
55:56
really boils down to an economics
55:57
question of whether or not it's
55:59
profitable for a miner to mine but we
56:02
can write down a simple equation that
56:04
represents what does what the inputs
56:07
into this decision are fundamentally the
56:09
mining reward that the miner gets is in
56:11
terms of the block reward and
56:13
transaction fees the miner asks himself
56:15
whether that's bigger than or less than
56:17
their total expenditure which is the
56:19
hardware and electricity cost in fact
56:21
Bitcoin mining is so expensive in terms
56:23
of electricity that that becomes a
56:25
significant portion of the cost and not
56:27
just the upfront cost of the hardware
56:28
and if the rewards are greater than the
56:31
costs and the Minor Prophets if not the
56:33
miner incurs loss but there are some
56:36
complications to this simple equation
56:37
the first is that as you may have
56:39
noticed the hardware cost is a fixed
56:41
cost it's an upfront cost whereas the
56:43
electricity cost is a variable cost that
56:46
is incurred over time another
56:49
complication is that remember that a
56:51
reward that the miner gets depends upon
56:53
the rate at which they find blocks which
56:55
depends on not just the power of their
56:57
hardware but in fact more accurately as
56:59
the ratio of the power of their hardware
57:02
as a fraction of the total global hash
57:04
rate so that makes it more complicated
57:07
as well another complication is note
57:11
that the costs that the miner incurs are
57:13
in terms of dollars or whatever currency
57:15
that they're using whereas they're
57:18
rewarded in terms of bitcoins that are
57:19
created or bitcoins that are transaction
57:22
fees so this equation is really going to
57:25
depend on what the exchange rate of
57:26
Bitcoin is doing at any given time and
57:29
finally so far we've assumed that the
57:31
miner is interested in honestly
57:33
following the protocol but it could be
57:35
the case that the miner could deploy
57:36
some other mining strategy instead of
57:38
always finding the next block that
57:41
extends the longest valid branch and so
57:44
this equation doesn't capture all the
57:47
nuances of the different strategies of
57:49
the miner
57:49
employ so even though we can write down
57:51
the simple equation actually analyzing
57:53
what it makes sense for miners to do as
57:55
a complicated game theory problem and we
57:58
don't have simple answers to that okay
58:00
so now we've obtained a pretty good
58:02
understanding of how Bitcoin achieves
58:04
decentralization let's put it all
58:06
together now and do a little bit of a
58:08
recap and understand some high-level
58:10
points in order to get an even better
58:11
understanding so what I'm going to do is
58:15
I'm going to do a very quick recap of
58:17
several of the major aspects of Bitcoin
58:19
that we've learned so far let's start
58:22
from identities as we've learned there
58:24
are no real-world identities required to
58:26
participate in the Bitcoin protocol any
58:27
user can create a pseudonymous key pair
58:30
at any moment any number of them and
58:33
when Alice and Bob want to make a
58:35
transaction when Alice for example wants
58:37
to know what address Bob wants to get
58:39
paid at that's not part of the Bitcoin
58:41
protocol that needs to be through some
58:44
other process for example on Bob the
58:46
merchants website so given these
58:49
pseudonymous key pairs as identities
58:52
transactions are basically messages that
58:56
are broadcast to the Bitcoin
58:57
peer-to-peer network that are
58:59
instructions to transfer a coin from one
59:04
address to another and the coin really
59:06
is just a tree and chain of transactions
59:08
to the extent that we can call anything
59:10
in Bitcoin an actual coin and this is
59:12
something we'll see in much more detail
59:14
in future lectures and so this
59:16
peer-to-peer network that we have looked
59:18
at its goal is to propagate all new
59:22
transactions to all the Bitcoin peer
59:24
nodes as well as new blocks to the
59:26
Bitcoin peer nodes but it's just going
59:28
to do sort of the best effort that it
59:30
can the real security of the system
59:32
doesn't come from the perfection of the
59:34
peer-to-peer network in fact the
59:35
underlying assumption that the network
59:37
is in fact quite unreliable but instead
59:40
where the security comes from is from
59:42
the blockchain and the consensus
59:44
protocol that we spent a lot of time
59:46
looking at so what it means for your
59:49
transaction to be in the blockchain is
59:51
that it achieves a lot of confirmations
59:53
it's not a fixed number six is a
59:56
commonly used heuristic but the more
59:58
confirmations your transaction is
60:00
received the more blocks
60:02
found that extend the block that
60:04
contained your transaction the more
60:06
certain you can be that your transaction
60:07
was part of the consensus change and now
60:10
often there are going to be a variety of
60:12
orphan blocks these are blocks that
60:15
don't make it into the consensus chain
60:17
this could represent an invalid
60:19
transaction or a double spent attempt it
60:21
could simply represent the fact that
60:23
there is latency in the network and two
60:25
miners competing to solve this
60:27
proof-of-work puzzle simply ended up
60:29
finding new blocks within just a few
60:32
seconds of each other and so both of
60:34
these blocks were broadcast nearly
60:36
simultaneously onto the network so
60:39
another subtle point here is that if
60:41
Alice and Bob are two different miners
60:42
and Alice has hundred times as much
60:44
computing power is Bob what that means
60:47
is not that Alice will always win the
60:49
race against Bob to find the next block
60:51
but instead Alice and Bob have a ratio a
60:55
probability ratio of finding the next
60:56
block and the proportion hundred to one
60:58
so in the long term Bob will find an
61:02
average one percent of the blocks that
61:03
Alice does so those are some of the
61:06
basics of block shade and consensus and
61:08
where the security of the system really
61:10
comes from and finally we looked at hash
61:12
puzzles in mining miners are special
61:14
type of nodes that bother to compete in
61:17
this game of creating new blocks and
61:19
they're rewarded for their efforts in
61:21
terms of bitcoins and we expect that
61:23
miners are going to be typically
61:25
somewhere near the economic equilibrium
61:26
of the expenditure that they incur in
61:29
terms of hardware and electricity being
61:31
somewhere equal to the rewards that they
61:36
obtain in terms of the new block
61:37
creation reward and the transaction fee
61:39
based rewards so that's a broad recap of
61:43
the system let me show you an appointed
61:46
way how deeply this notion of
61:48
distributed consensus permeates Bitcoin
61:50
now in a traditional currency there is
61:54
consensus does come into play in a
61:56
certain limited extent which is we have
61:58
a consensus process around what is the
62:01
exchange rate of the currency you can
62:02
make a rough analogy to consensus and
62:04
distributed systems and that is
62:06
certainly true in Bitcoin as well we
62:09
need consensus around the value of the
62:11
exchange rate of Bitcoin but consensus
62:13
goes much deeper and bit
62:15
coin than another say fiat currencies in
62:17
fact you need consensus around state
62:20
which is what the blockchain
62:21
accomplishes that is a record of which
62:23
transactions are valid or which
62:24
transactions have even happened so even
62:27
the idea of how many bitcoins you own is
62:30
subject to consensus what it means when
62:33
I say I own a certain amount or number
62:35
of bitcoins is that I mean that the
62:38
Bitcoin peer-to-peer network as recorded
62:41
in the blockchain considers me the sum
62:44
total of all my addresses to own a
62:46
certain number of bitcoins that is sort
62:48
of the ultimate nature of truth in
62:49
Bitcoin so ownership of bitcoins is
62:51
nothing more than other nodes thinking
62:54
that I own a certain number of bitcoins
62:56
and finally we need consensus about the
62:59
rules of the system because occasionally
63:01
the rules of the system have to change
63:03
there are things called hot soft Forks
63:05
and hard Forks and we're going to see a
63:07
little bit more detail of this in later
63:09
lectures now I want to show you another
63:14
subtle idea which is very tricky and
63:16
it's this very neat idea of
63:19
bootstrapping that I really found
63:21
intriguing the first time I encountered
63:22
it and so I want to share this with you
63:24
so what do I mean by bootstrapping I
63:27
mean the tricky interplay between three
63:29
things in Bitcoin and what are these
63:31
three things let's start from the notion
63:33
of security of the blockchain so
63:35
obviously we want the blockchain to be
63:38
secure for Bitcoin to have to be a
63:40
viable currency but what is necessary
63:43
for for the blockchain to be secure what
63:46
this means is that an adversary
63:48
shouldn't be able to overwhelm the
63:50
consensus process shouldn't be able to
63:52
create a lot of nodes and take over 50%
63:55
or more of the new block creation but
63:58
when will that be true what is it
64:00
prerequisite for that a prerequisite for
64:02
that is having a healthy mining
64:04
ecosystem made up of largely honest
64:08
protocol following notes so that's a
64:10
prerequisite for security of the
64:11
blockchain but what's a prerequisite for
64:14
that when can we be sure that a lot of
64:16
miners will put a lot of computing power
64:18
into participating in this hash
64:21
puzzle-solving competition well they're
64:23
only going to do that if the exchange
64:24
rate of Bitcoin is pretty high why is
64:28
that because
64:29
they receive rewards denominated in
64:31
bitcoins whereas their expenditures and
64:32
dollars so the more the value of the
64:34
currency goes up the more incentivize
64:36
these miners are going to be but what
64:39
ensures a high and stable value of the
64:42
currency that can only happen if users
64:45
in general people who want to buy
64:47
bitcoins have trust in the security of
64:49
the blockchain because if they believe
64:51
that the network could be overwhelmed at
64:53
any moment by an attacker then bitcoin
64:55
is not going to have a lot of values
64:57
occurrence II so you have this
64:59
interlocking interdependence between
65:01
these three things all right so the
65:03
existence of each of these is predicated
65:05
on the existence of another so one might
65:09
flip that around and imagine at the
65:11
beginning at during bitcoins creation
65:13
when none of these three things existed
65:15
when there were no miners other than
65:17
what we believe to be Nakamoto himself
65:21
or whoever the Creator was running the
65:23
mining software and when Bitcoin didn't
65:26
have a lot of value as a currency and
65:28
when the blockchain was in fact insecure
65:30
because there was not a lot of mining
65:31
going on and so anybody could easily
65:33
overwhelm this process how do you go
65:35
from there not having any of these three
65:37
properties to going all three to having
65:40
all three of them and that is what I
65:42
mean by bootstrapping and it's this very
65:44
tricky process of how all of these three
65:47
characteristics were acquired by the
65:49
Bitcoin system in an interdependent
65:51
manner with each other and this was of
65:53
course fueled by a lot of media
65:56
attention as well because the more
65:57
people hear about Bitcoin the more
65:59
they're going to get interested in
66:00
mining and the more they get interested
66:02
in mining the more confidence people
66:04
will have in the security of the
66:05
blockchain because there's now more
66:07
mining activity going on and so on and
66:09
so forth and so Bitcoin went from having
66:13
none of these properties to now having
66:14
in some large measure all three of these
66:17
properties and that's the interesting
66:19
bootstrapping feature of Bitcoin and
66:20
every new alts coin that wants to
66:22
succeed also has to somehow solve this
66:26
problem of pulling itself up by its
66:28
bootstraps okay let me leave you now
66:32
with one final thing which is that in
66:35
order to understand our consensus and
66:38
what its responsible for and what it's
66:40
not responsible for a
66:42
way to do that is to ask ourselves what
66:45
would happen if consensus failed and
66:47
there were in fact a 51% attacker
66:49
somehow who controls 51% or more of the
66:53
mining power in the Bitcoin network so
66:56
let's see what happens in that case and
66:57
let's list a whole variety of things
67:00
possible bad things that we think might
67:03
happen and let's ask ourselves which of
67:05
these are possible for a 51% attacker
67:08
first of all can this attacker steal
67:11
coins from an existing address
67:13
well you might guess that the answer is
67:15
no because stealing from an existing
67:17
address is not possible unless you
67:18
subvert the cryptography it's not enough
67:20
to subvert the consensus process this is
67:23
a bit tricky let's follow through this
67:25
line of argument let's say that this 51%
67:28
attacker creates an invalid block that
67:31
contains an invalid transaction that
67:32
represents stealing bitcoins from an
67:35
existing address that the attacker
67:36
doesn't control and transferring them to
67:38
his own address
67:39
now this attacker can pretend that
67:42
that's a valid transaction and pretend
67:43
that that's a valid block and keep
67:45
building upon this block and even
67:47
succeed in making that the the longest
67:51
branch but the other honest nodes are
67:53
simply not going to accept this invalid
67:56
block and are going to keep mining based
67:58
on the last valid block that they found
68:00
in the network so what will happen is
68:02
that there will be what we call a fork
68:05
in the chain now imagine this from the
68:07
point of view of the attacker trying to
68:09
spend these invalid coins and send them
68:12
to some merchants Bob and buy something
68:14
in exchange now Bob will presumably be
68:16
running a Bitcoin node himself and that
68:18
will be an honest node and that node is
68:20
going to say oh this might be the
68:21
longest branch but it's not a valid
68:23
branch because it contains an invalid
68:25
transaction because the crypto the
68:27
signatures doesn't check out and so it's
68:29
going to simply ignore this longest
68:31
branch because it's an invalid branch
68:33
and because of that subverting consensus
68:36
is not enough you have to subvert
68:37
cryptography in to steal coins from an
68:39
existing address so we conclude that
68:41
this attack is not possible for a 51%
68:43
attacker by the way in saying all of
68:47
this I should note that this is all
68:48
somewhat hypothetical somewhat a thought
68:50
experiment because if there were in fact
68:52
actual signs of a 51% attack
68:55
it will probably happen is that the
68:57
developers will notice this and will try
68:59
to react to it and we'll update the
69:01
Bitcoin software and we might expect
69:03
that the rules of the system of the p2p
69:05
network might change in some form to
69:08
make this attack more difficult to
69:10
launch but we can't quite predict that
69:12
so we're working in a simplified model
69:13
where 51% attack happens but other than
69:16
that there are no changes or tweaks to
69:18
the rules of the system okay let's move
69:21
on
69:22
can the attackers suppress some
69:23
transactions let's say there is some
69:25
user say Carol whom the attacker really
69:28
doesn't like and the attacker knows some
69:30
of Carol's addresses and wants to make
69:32
sure that no coins belonging to any of
69:34
those addresses can possibly be spent is
69:37
that possible well let's think about
69:40
this
69:40
the attacker since he controls the
69:44
consensus process of the blockchain can
69:47
simply refuse to create any new blocks
69:50
that contain transactions from that from
69:53
one of Carol's addresses and can in fact
69:55
also refuse to build upon blocks that
69:57
contain such transactions and the
69:59
attacker will be successful at that
70:01
however the attacker cannot prevent
70:04
these transactions from even broadcast
70:07
to the peer-to-peer network because the
70:09
peer-to-peer network doesn't depend on
70:11
the blockchain doesn't depend on
70:12
consensus and we're assuming that the
70:14
attacker doesn't fully control the
70:15
network so the transactions are still
70:17
going to find a way to reach the
70:19
majority of notes so even if the
70:21
attacker tries this attack it will be
70:23
very clear that that attack is happening
70:25
because the peer-to-peer network will
70:27
still receive these transactions okay
70:31
what about this one can the attacker
70:32
change the block reward can the attacker
70:34
start pretending that the block reward
70:36
is instead of 25 bitcoins 100 bitcoins
70:39
or something like that well this sort of
70:41
corresponds to changing the rules of the
70:43
system and because of a reasoning
70:45
similar to what we applied for stealing
70:47
bitcoins from an existing address this
70:49
is also not possible because the
70:51
attacker doesn't control the copies of
70:54
the Bitcoin software that all of the
70:56
honest nodes are running so that's also
70:58
not possible finally let's ask ourselves
71:01
if the attacker can somehow destroy
71:02
confidence in Bitcoin well let's imagine
71:05
what would happen if there were
71:08
variety of double spending temps and not
71:12
at behavior of not extending the longest
71:14
valid branch and others had she
71:16
attempted attacks then people are going
71:18
to look at this and decide that bitcoin
71:21
is no longer acting as a decentralized
71:23
ledger that they can trust and so people
71:25
will simply lose confidence in the
71:27
currency and we might expect that the
71:29
exchange rate of Bitcoin is going to
71:30
plummet in fact if there is a 51%
71:33
attacker and this is known even if the
71:36
attacker is not necessarily trying to
71:37
launch any attacks it's possible that
71:39
this might happen
71:40
so this we can classify as not only
71:42
possible but in fact likely that a 51%
71:45
attack of any sort will simply destroy
71:47
confidence in the currency and this last
71:49
one is in fact the main practical threat
71:51
if a 51% attack were ever to materialize
71:54
none of these others really considering
71:57
the amount of expenditure that the
72:00
adversary would have to put into
72:01
attacking Bitcoin and achieving a 51%
72:03
majority really makes sense from a
72:05
financial point of view to try any of
72:07
these other attacks great so now
72:10
hopefully you've obtained a really good
72:13
understanding of how decentralization is
72:15
achieved in Bitcoin and I'm just stood
72:17
identities understood transactions
72:19
understood the peer-to-peer network
72:20
understood the blockchain and consensus
72:23
understand hash puzzles and mining so
72:25
you should be in a really good point now
72:26
and a good launching point for
72:28
understanding a lot more of the subtle
72:29
details and nuances of Bitcoin which
72:32
we're going to start seeing in the next
72:33
few lectures so the next lecture is
72:35
going to be by Joe Bono
72:37
where he will address a lot of questions
72:39
that take off from the point where we
72:42
have left off in this lecture the first
72:44
is how do we get from consensus to
72:46
currency so this is an assumption that
72:48
I've already made in this lecture not
72:50
only are we solving a distributed
72:52
consensus problem but also we're
72:53
treating the result of distributed
72:55
consensus as the currency now in order
72:57
to incentivize participants but a lot of
73:00
details are are missing what exactly
73:02
does it mean to be paid in Bitcoin how
73:04
does that happen
73:05
how are those transactions represented
73:07
and so on we're going to look at that
73:08
we're going to look at what else can we
73:10
do with consensus I hinted at this a
73:12
little bit but it turns out that Bitcoin
73:15
offers a lot in addition to just doing
73:16
consensus it has a whole scripting
73:18
language so there are a lot of
73:20
interesting things to see there and so
73:22
Joe is going to take it from there in
73:23
the next lecture thank you
73:37
you






